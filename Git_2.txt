- 충돌
여러 사용자가 동일한 파일을 수정한 경우 발생

```bash
# board_modify, notice_modify 브랜치 생성

# 공지사항_기능.txt 수정 => notice_modify
# 프로젝트_기본.txt 수정 => notice_modify
# 회원관리_기능.txt 수정 => notice_modify

# notice_modify 브랜치로 커밋

# 게시판_기능.txt 수정 => board_modify
# 프로젝트_기본.txt 수정 => board_modify
# 회원관리_기능.txt 수정 => board_modify

# board_modify 브랜치로 커밋

# master 브랜치로 체크아웃 후 notice_modify 브랜치를 병합

# master 브랜치로 체크아웃 후 board_modify 브랜치를 병합
# => 병합 안됨(경고 발생)
# => 커밋 상태에 충돌난 파일들 출력
# 프로젝트_기본.txt, 회원관리_기능.txt 파일 열면 충돌 사항 저장되어 있음

# 충돌 사항에 대해 직접 해결 후 병합 가능

# HEAD : 현재 브랜치에서 작업된 내용
# 충돌 해결
# - 내것을 이용해 해결 : HEAD 내용 적용
# - 저장소것을 이용해 해결 : 

# 회원관리_기능 notice_modify 브랜치가 적합으로 판정
# => '내것'을 이용해 해결
# 프로젝트_기본 board_modify 브랜치가 적합으로 판정
# => '저장소'것을 이용해 해결

# 여러 수정사항에 대해 직접 해결 필요
```

- 깃 브랜치 전략
    
    ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/5a873885-ca92-4e4d-b55a-4ff26a9d9d0b/27c4e17f-39ec-4541-be60-6e1da1ca0dd5/image.png)
    
    - Git Flow
        - master(or main) : 출시 버전을 관리하는 브랜치
        - develop : 개발 코드들이 들어가는 브랜치
        - release : 다음 출시 버전을 준비하는 브랜치
        - feature branches : develop 브랜치에서 feature 브랜치 새로 생성(기능별)
        - hot fix : 출시된 제품의 버그를 고치기 위한 브랜치
- .gitignore
    - git에서 관리하지 않는 파일들의 목록을 작성하는 파일
    - 저장소 최상위에 저장되어야 정상적으로 동작

- Git ssh로 접속

```bash
# 깃 설정 목록 확인
git config --list

# name 없을 시 지정
git config --global user.name '<이름>'
# email 없을 시 지정
git config --global user.email '<이메일>'

# ssh key 생성
ssh-keygen -t ed25519 -C "<이메일>"

# config 파일 생성
vim ~/.ssh/config

# config 파일 내용 작성
Host github.com
  IdentityFile ~/.ssh/id_ed25519
  User git
  
# public key 복사
cat id_ed25519.pub # 내용 확인 후 출력 복사

# github 프로젝트 설정으로 돌아와서
# deploy keys 메뉴
# add new 버튼
# title 및 복사한 키 값 작성

# 저장할 디렉터리로 이동
cd

# github ssh code 복사
git clone <복사한 ssh 코드>

# ssh로 clone 완료
```